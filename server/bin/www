const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");
const https = require("https");
const fs = require("fs");

/**
 * Set port number.
 */
const port = parseInt(process.env.PORT || 5000, 10);
app.set("port", port);

/**
 * Create HTTP or HTTPS server.
 */
let server;

if (process.env.NODE_ENV === "production") {
  let options = {
    ca: fs.readFileSync("/etc/ssl/ca_bundle.crt"),
    key: fs.readFileSync("/etc/ssl/private/private.key"),
    cert: fs.readFileSync("/etc/ssl/certificate.crt"),
    requestCert: false,
    rejectUnauthorized: false,
  };
  server = https.createServer(options, app);
} else server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {
  console.log(`Express server listening on port ${server.address().port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
